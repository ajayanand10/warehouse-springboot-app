/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.time.Instant;
import java.time.LocalDate;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

@Entity
@Table(name = "author")
public class Author implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Author.class.getName());

    // Raw attributes
    private Integer id;
    private LocalDate birthDate;
    private Instant birthDateTime;
    private String civility;
    private String email;
    private String firstName;
    private String lastName;
    private Integer favoriteAuthorId;

    @Override
    public String entityClassName() {
        return Author.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Author id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [birthDate] ------------------------

    @Column(name = "birth_date", length = 13)
    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public Author birthDate(LocalDate birthDate) {
        setBirthDate(birthDate);
        return this;
    }
    // -- [birthDateTime] ------------------------

    @Column(name = "birth_date_time", length = 29)
    public Instant getBirthDateTime() {
        return birthDateTime;
    }

    public void setBirthDateTime(Instant birthDateTime) {
        this.birthDateTime = birthDateTime;
    }

    public Author birthDateTime(Instant birthDateTime) {
        setBirthDateTime(birthDateTime);
        return this;
    }
    // -- [civility] ------------------------

    @Size(max = 2)
    @Column(name = "civility", length = 2)
    public String getCivility() {
        return civility;
    }

    public void setCivility(String civility) {
        this.civility = civility;
    }

    public Author civility(String civility) {
        setCivility(civility);
        return this;
    }
    // -- [email] ------------------------

    @Email
    @Size(max = 100)
    @Column(name = "email", length = 100)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Author email(String email) {
        setEmail(email);
        return this;
    }
    // -- [firstName] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "first_name", nullable = false, length = 100)
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public Author firstName(String firstName) {
        setFirstName(firstName);
        return this;
    }
    // -- [lastName] ------------------------

    @Size(max = 100)
    @Column(name = "last_name", length = 100)
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Author lastName(String lastName) {
        setLastName(lastName);
        return this;
    }
    // -- [favoriteAuthorId] ------------------------

    @Digits(integer = 10, fraction = 0)
    @Column(name = "favorite_author_id", precision = 10)
    public Integer getFavoriteAuthorId() {
        return favoriteAuthorId;
    }

    public void setFavoriteAuthorId(Integer favoriteAuthorId) {
        this.favoriteAuthorId = favoriteAuthorId;
    }

    public Author favoriteAuthorId(Integer favoriteAuthorId) {
        setFavoriteAuthorId(favoriteAuthorId);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Author withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Author && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Author instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("birthDate", getBirthDate()) //
                .add("birthDateTime", getBirthDateTime()) //
                .add("civility", getCivility()) //
                .add("email", getEmail()) //
                .add("firstName", getFirstName()) //
                .add("lastName", getLastName()) //
                .add("favoriteAuthorId", getFavoriteAuthorId()) //
                .toString();
    }
}
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.MyTest;
import com.mycompany.myapp.domain.MyTest_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.MyTestRepository;

/**
 * A simple DTO Facility for MyTest.
 */
@Service
public class MyTestDTOService {

    @Inject
    private MyTestRepository myTestRepository;

    @Transactional(readOnly = true)
    public MyTestDTO findOne(Integer id) {
        return toDTO(myTestRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<MyTestDTO> complete(String query, int maxResults) {
        List<MyTest> results = myTestRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<MyTestDTO> findAll(PageRequestByExample<MyTestDTO> req) {
        Example<MyTest> example = null;
        MyTest myTest = toEntity(req.example);

        if (myTest != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(MyTest_.firstName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(MyTest_.lastName.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(myTest, matcher);
        }

        Page<MyTest> page;
        if (example != null) {
            page = myTestRepository.findAll(example, req.toPageable());
        } else {
            page = myTestRepository.findAll(req.toPageable());
        }

        List<MyTestDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public MyTestDTO save(MyTestDTO dto) {
        if (dto == null) {
            return null;
        }

        final MyTest myTest;

        if (dto.isIdSet()) {
            MyTest myTestTmp = myTestRepository.findOne(dto.id);
            if (myTestTmp != null) {
                myTest = myTestTmp;
            } else {
                myTest = new MyTest();
                myTest.setId(dto.id);
            }
        } else {
            myTest = new MyTest();
        }

        myTest.setFirstName(dto.firstName);

        myTest.setLastName(dto.lastName);

        myTest.setDateOfJoining(dto.dateOfJoining);

        return toDTO(myTestRepository.save(myTest));
    }

    /**
     * Converts the passed myTest to a DTO.
     */
    public MyTestDTO toDTO(MyTest myTest) {
        return toDTO(myTest, 1);
    }

    /**
     * Converts the passed myTest to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param myTest
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public MyTestDTO toDTO(MyTest myTest, int depth) {
        if (myTest == null) {
            return null;
        }

        MyTestDTO dto = new MyTestDTO();

        dto.id = myTest.getId();
        dto.firstName = myTest.getFirstName();
        dto.lastName = myTest.getLastName();
        dto.dateOfJoining = myTest.getDateOfJoining();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a MyTest.
     * Convenient for query by example.
     */
    public MyTest toEntity(MyTestDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a MyTest.
     * Convenient for query by example.
     */
    public MyTest toEntity(MyTestDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        MyTest myTest = new MyTest();

        myTest.setId(dto.id);
        myTest.setFirstName(dto.firstName);
        myTest.setLastName(dto.lastName);
        myTest.setDateOfJoining(dto.dateOfJoining);
        if (depth-- > 0) {
        }

        return myTest;
    }
}